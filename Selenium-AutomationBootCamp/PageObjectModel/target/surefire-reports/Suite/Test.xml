<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="0" hostname="DESKTOP-FEQ3OA0" failures="0" tests="3" name="Test" time="1.125" errors="0" timestamp="2022-12-19T15:21:14 IST">
  <testcase classname="base.ProjectSpecificMethods" name="@BeforeMethod StartApplication" time="-1.671443472958E9">
    <failure type="org.testng.TestNGException" message="
Can inject only one of &amp;lt;ITestContext, XmlTest, Method, Object[], ITestResult&amp;gt; into a @BeforeMethod annotated StartApplication.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated StartApplication.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
... Removed 13 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod StartApplication -->
  <testcase classname="base.ProjectSpecificMethods" name="@AfterMethod closeApp" time="-1.671443472966E9">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase classname="base.ProjectSpecificMethods" name="@BeforeMethod StartApplication" time="-1.671443474023E9">
    <failure type="org.testng.TestNGException" message="
Can inject only one of &amp;lt;ITestContext, XmlTest, Method, Object[], ITestResult&amp;gt; into a @BeforeMethod annotated StartApplication.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection">
      <![CDATA[org.testng.TestNGException: 
Can inject only one of <ITestContext, XmlTest, Method, Object[], ITestResult> into a @BeforeMethod annotated StartApplication.
For more information on native dependency injection please refer to https://testng.org/doc/documentation-main.html#native-dependency-injection
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)
at java.base/java.lang.Thread.run(Thread.java:832)
... Removed 13 stack frames]]>
    </failure>
  </testcase> <!-- @BeforeMethod StartApplication -->
  <testcase classname="base.ProjectSpecificMethods" name="@AfterMethod closeApp" time="-1.671443474025E9">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase classname="base.ProjectSpecificMethods" name="@BeforeMethod StartApplication" time="-1.671443474025E9">
    <skipped/>
  </testcase> <!-- @BeforeMethod StartApplication -->
  <testcase classname="base.ProjectSpecificMethods" name="@AfterMethod closeApp" time="-1.671443474025E9">
    <skipped/>
  </testcase> <!-- @AfterMethod closeApp -->
  <testcase classname="testcase.LoginWithInvalidData" name="inValidData" time="0.0">
    <skipped/>
  </testcase> <!-- inValidData -->
  <testcase classname="testcase.LoginAndLogout" name="loginLogout" time="0.0">
    <skipped/>
  </testcase> <!-- loginLogout -->
  <testcase classname="testcase.LoginAndLogout" name="loginLogout" time="0.0">
    <skipped/>
  </testcase> <!-- loginLogout -->
</testsuite> <!-- Test -->
